{"ast":null,"code":"//Axios provides support for request and response interceptors, transformers and auto-conversion to JSON. \n//It's also protecting you by default against cross-site request forgery (XSRF).\n//Promise based HTTP client for the browser and node.js\nimport axios from \"axios\";\nimport { API_URL } from \"../../Constants\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\"; //When user is succesfully logged in, we create a key to save in session storage\n\nclass AuthenticationService {\n  //when a user logged in, call the jwt authenticate service\n  //no need for a header, send a post request with username and password\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(\"\".concat(API_URL, \"/authenticate\"), {\n      username,\n      password\n    });\n  }\n\n  createJwtToken(token) {\n    return \"Bearer \" + token;\n  }\n\n  registerSuccessfulLoginForJws(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username); //every http request from now on needs to use the token, wich came in response\n    //token is created in backend\n\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  } //token is deleted when user loggs out\n\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  } //check if user is logged in to use it througtout the application\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return \"\";\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/aggut/OneDrive/Documenten/GitHub/Eindproject-SuperClass/in28min-tutorial/DDDemoApp/src/components/DemoApp/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","username","password","post","createJwtToken","token","registerSuccessfulLoginForJws","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC,C,CAEP;;AACA,MAAMC,qBAAN,CAA4B;AAE5B;AACA;AACIC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC/C,WAAON,KAAK,CAACO,IAAN,WAAcN,OAAd,oBAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDE,EAAAA,cAAc,CAACC,KAAD,EAAO;AACjB,WAAO,YAAYA,KAAnB;AACH;;AAEDC,EAAAA,6BAA6B,CAACL,QAAD,EAAWI,KAAX,EAAiB;AAC1CE,IAAAA,cAAc,CAACC,OAAf,CAAuBV,gCAAvB,EAAyDG,QAAzD,EAD0C,CAElD;AACA;;AACQ,SAAKQ,sBAAL,CAA4B,KAAKL,cAAL,CAAoBC,KAApB,CAA5B;AACH,GApBuB,CAsB5B;;;AACIK,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0Bb,gCAA1B;AACH,GAzBuB,CA2B5B;;;AACIc,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAGe,IAAI,KAAG,IAAV,EAAgB,OAAO,KAAP;AAChB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAE;AACjB,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAGe,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AAEDJ,EAAAA,sBAAsB,CAACJ,KAAD,EAAO;AACzBT,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKP,cAAL,EAAH,EAAyB;AACrBO,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BhB,KAA/B;AACH;;AACD,aAAOc,MAAP;AACH,KANL;AAQH;;AAjDuB;;AAqD5B,eAAe,IAAIpB,qBAAJ,EAAf","sourcesContent":["//Axios provides support for request and response interceptors, transformers and auto-conversion to JSON. \r\n//It's also protecting you by default against cross-site request forgery (XSRF).\r\n//Promise based HTTP client for the browser and node.js\r\nimport axios from \"axios\"\r\nimport {API_URL} from \"../../Constants\"\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = \"authenticatedUser\"\r\n\r\n//When user is succesfully logged in, we create a key to save in session storage\r\nclass AuthenticationService {   \r\n\r\n//when a user logged in, call the jwt authenticate service\r\n//no need for a header, send a post request with username and password\r\n    executeJwtAuthenticationService(username, password){        \r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            password\r\n        })\r\n    }   \r\n    \r\n    createJwtToken(token){\r\n        return \"Bearer \" + token\r\n    } \r\n\r\n    registerSuccessfulLoginForJws(username, token){\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n//every http request from now on needs to use the token, wich came in response\r\n//token is created in backend\r\n        this.setupAxiosInterceptors(this.createJwtToken(token))\r\n    }\r\n\r\n//token is deleted when user loggs out\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n//check if user is logged in to use it througtout the application\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if(user===null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUsername(){\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if(user===null) return \"\"\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token){\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLoggedIn()){\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService()\r\n"]},"metadata":{},"sourceType":"module"}